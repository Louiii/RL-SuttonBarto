import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import rcParams, cycler
import numpy as np
import json
matplotlib.use('Agg')

def violin(data):
    plt.violinplot(dataset=data, showmeans=True, showextrema=False, points=300, bw_method='scott')
    plt.xlabel("Action")
    plt.ylabel("Reward distribution")
    plt.title("Bandit distributions")
    plt.savefig('vio.png', dpi=300)
    plt.close()

def plotHists(data):
    n = len(data[0, :])

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    cmap = plt.cm.viridis
    rcParams['axes.prop_cycle'] = cycler(color=cmap(np.linspace(0, 1, n)))
    nbins = 100
    i=0
    for z in [10*i for i in range(n)]:
        # ys = np.random.normal(loc=10, scale=10, size=2000)
        ys = data[:, i]


        hist, bins = np.histogram(ys, bins=nbins)
        xs = (bins[:-1] + bins[1:])/2

        ax.bar(xs, hist, zs=z, zdir='y', color=cmap(float(i)/n), alpha=0.7, width=0.06)
        hist, bins = np.histogram([1 for _ in range(1000)], bins=1)
        ax.bar([sum(ys)/len(ys)], hist, zs=z, zdir='y', color='r', alpha=0.9, width=0.08)
        i+=1

    ax.set_xlabel('Reward distribution')
    ax.set_ylabel('')
    ax.set_zlabel('Density')
    labels = [item.get_text() for item in ax.get_yticklabels()]
    print(labels)
    m=2
    if n>5:
        m=1
    for i in range(n):
        labels[i*m] = 'Action '+str(i+1)
    ax.set_yticklabels(labels)

    plt.title("Bandit histograms")

    plt.savefig('hists.png', dpi=400)
    plt.show()
    plt.close()

def sea(vals, rec, fname):
    # get the optimal policy
    pol = np.zeros(shape=vals.shape)
    for i in range(vals.shape[0]):
        pol[i, list(vals[i]).index( max( vals[i, :] ) )]=1

    images = [pol, vals]
    titles = ['policy', 'Qvals']

    _, axes = plt.subplots(1, 2, figsize=(40, 30))
    # plt.subplots_adjust(wspace=0.1, hspace=0.2)
    axes = axes.flatten()

    for image, title, axis in zip(images, titles, axes):
        # print(image.shape)
        fig = sns.heatmap(np.flipud(image), cmap="YlGnBu", ax=axis,
                            xticklabels=range(1, image.shape[1]+1),
                            yticklabels=range(image.shape[0],0,-1))
        fig.set_ylabel('Iteration x'+str(rec), fontsize=30)
        fig.set_xlabel('Action', fontsize=30)
        fig.set_title(title, fontsize=30)
    plt.savefig(fname+'.png')
    plt.close()

def plotOptimality(data):
    labels = list(data.keys())
    xss = [ list(range(1, 1+len(data[k]))) for k in labels ]
    yss = [ data[k] for k in labels ]

    plt.clf

    # f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    f, ax1 = plt.subplots(1, 1)


    f.suptitle('Proportion of times optimal action chosen vs Iterations for each action selection method')
    cmap = plt.cm.PuRd_r
    rcParams['axes.prop_cycle'] = cycler(color=cmap(np.linspace(0, 1, len(labels))))

    for i in range(len(labels)):
        ax1.plot(xss[i], yss[i], color=cmap((i)*(0.9*1/len(labels))), lw=0.6, label=labels[i])
    ax1.set_ylabel('Proportion of times optimal action chosen')
    ax1.set_xlabel('Iteration')

    ax1.legend(loc='lower right', fancybox=True, shadow=True)
    # for i in range(len(labels)):
    #     ax2.plot(xss[i], yss[i], color=cmap((i)*(0.9*1/len(labels))), label=labels[i], lw=0.6)
    # ax2.legend(loc='lower right', fancybox=True, shadow=True)
    # ax2.set_xscale("log")
    # ax2.set_xlabel('Log Iteration')

    f.set_size_inches(10.0, 4.5)
    plt.plot()
    plt.savefig('LearningRates.png', dpi=400)#, bbox_inches = 'tight')
    plt.close()

def export_dataset(data, name):
    # recordFormat = [(b.n, list(b.μs), list(b.σs), list(b.ws)) for b in bandits]
    with open('datasets/'+name+'.json', 'w') as outfile:
        json.dump(data, outfile)

def load_dataset(name):
    json_file = open('datasets/'+name+'.json')
    json_str = json_file.read()
    return json.loads(json_str)
