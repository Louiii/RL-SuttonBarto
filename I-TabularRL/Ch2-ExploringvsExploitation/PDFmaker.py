import random
import json
import numpy as np

def makeNormal(samples, mean, sd):
    data = sd * np.random.randn(samples) + mean
    return list(data)

class CompositeNormals():
    def __init__(self, complexity, means, stddev, weights):
        self.n  = complexity
        self.μs = means
        self.σs = stddev
        self.ws = weights
        self.μ  = np.dot(means, weights)

def designPDF(complexity, m=1, sd=1, w=1): # complexity is the number of normal distributions to compose the pdf
    #  rand gives samples from a uniform dist over 0-1
    means = np.random.randn(complexity)*m
    sds = np.random.rand(complexity)*sd + 0.05
    weights = np.random.rand(complexity)**w
    weights /= sum(weights)
    pdf = CompositeNormals(complexity, means, sds, weights)
    return pdf

def saveBandits(bandits):
    recordFormat = [(b.n, list(b.μs), list(b.σs), list(b.ws)) for b in bandits]
    with open('RecordedBandits/Bandits.json', 'w') as outfile:
        json.dump(recordFormat, outfile)

def autoShift(bandits, shift):
    mns = [x.μ for x in bandits]
    translations = [ i*shift - mns[i] for i in range(len(mns))]
    for i in range(len(bandits)):
        bandits[i].μs += translations[i]
        bandits[i].μ = i*shift
    return bandits

def designNewBandits(shift=0.1):
    A = designPDF(5, m=1,   sd=1,   w=1)
    B = designPDF(2, m=2.5, sd=0.1, w=2)
    C = designPDF(8, m=1,   sd=0.3, w=1)
    D = designPDF(3, m=0.3, sd=2,   w=1.5)
    E = designPDF(4, m=0.8, sd=0.5, w=1)
    F = designPDF(8, m=1,   sd=0.4, w=1)
    G = designPDF(3, m=1.7, sd=0.8, w=1.5)

    bandits = [A,B,C,D,E,F,G]
    # print([x.μ for x in bandits])
    bandits = autoShift(bandits, shift)
    # print([np.dot(x.μs, x.ws) for x in bandits])

    saveBandits( bandits )
